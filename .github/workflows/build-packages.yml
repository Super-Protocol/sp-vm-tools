name: Build packages

on:
  # push:
  #   tags:
  #     - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on:  ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt install -y build-essential libncurses-dev bison flex libssl-dev libelf-dev \
          debhelper-compat=12 meson ninja-build libglib2.0-dev python3-pip nasm iasl \
          git bc cpio kmod rsync zstd checkinstall libslirp-dev
          git config --global user.email "youremail@yourdomain.com"
          git config --global user.name "Your Name"

          mkdir -p $RUNNER_TEMP/build
          df -h
          echo "=========="
          df -h $RUNNER_TEMP

      # - name: Prepare patches
      #   run: |
      #     source ./scripts/build.sh
      #     preparePatches $RUNNER_TEMP/build

      # - name: Build kernel
      #   run: |
      #     source ./scripts/build.sh
      #     config_file=$(find ./config -name "config-*" | head -n 1)

      #     if [[ -z "$config_file" ]]; then
      #         echo "Old config not found!"
      #         exit 1
      #     fi
      #     build_kernel_packages $RUNNER_TEMP/build $(readlink -f $config_file)

      # - name: Build QEMU
      #   run: |
      #     source ./scripts/build.sh
      #     build_qemu ${tmp_dir} $RUNNER_TEMP/build

      # - name: Build OVMF
      #   run: |
      #     source ./scripts/build.sh
      #     build_ovmf ${tmp_dir} $RUNNER_TEMP/build

      # - name: Pack Result
      #   run: |
      #     source ./scripts/build.sh
      #     build_ovmf ${tmp_dir} $RUNNER_TEMP/build

      # - name: Create GitHub Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   with:
      #     tag_name: ${{ github.ref_name }}
      #     release_name: Release ${{ github.ref_name }}
      #     draft: false
      #     prerelease: false
      #     generate_release_notes: false

      # - name: Upload Release Asset
      #   uses: actions/upload-release-asset@v1
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./path/to/your/asset.zip
      #     asset_name: asset.zip
      #     asset_content_type: application/zip